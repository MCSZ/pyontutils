#!/usr/bin/env python

import os
import glob
import rdflib
from lxml import etree
from pyontutils.utils import makeGraph
from IPython import embed


ATLAS_PATH = '/usr/share/fsl/data/atlases/'
ONT_PATH = 'http://ontology.neuinfo.org/NIF/ttl/generated/'

# ingest the structured xml files and get the name of the atlas/parcellation scheme
# ingest the labels
# for each xml files/set of nii files generate a ttl file

def main():
    for xmlfile in glob.glob(ATLAS_PATH + '*.xml'):

        tree = etree.parse(xmlfile)
        name = tree.xpath('header//name')[0].text
        filename = os.path.basename(xmlfile).replace('.xml','.ttl')
        ontid = ONT_PATH + filename
        new_graph = makeGraph(os.path.splitext(filename)[0], {'':ontid+'/','skos':'http://www.w3.org/2004/02/skos/core#'})
        new_graph.add_node(ontid, rdflib.RDF.type, rdflib.OWL.Ontology)

        new_graph.add_node(ontid, rdflib.RDFS.label, name)
        new_graph.add_node(ontid, rdflib.RDFS.comment, 'This file is automatically generated from the %s file in the FSL atlas collection.' % xmlfile)

        sn = tree.xpath('header//shortname')
        if sn:
            new_graph.add_node(ontid, rdflib.namespace.SKOS.altLabel, sn[0].text)

        #tree.xpath('header//shortname').text
        for node in tree.xpath('data//label'):
            id_ = ':' + node.get('index')
            label = node.text
            new_graph.add_node(id_, rdflib.RDF.type, rdflib.OWL.Class)
            new_graph.add_node(id_, rdflib.RDFS.label, label)
        #print([(l.get('index'),l.text) for l in tree.xpath('data//label')])
        new_graph.write()

    #embed()

if __name__ == '__main__':
    main()

